export enum Category {
    Beacon = 'Beacon',
    Sensor = 'Sensor',
    Camera = 'Camera',
}

const CategoryTranslation = {
  Beacon: $localize`:@@type.beacon:Beacon`,
  Sensor: $localize`:@@type.sensor:Sensor`,
  Camera: $localize`:@@type.camera:Camera`,
};

export function getCategoryTranslation(category) {
    return CategoryTranslation[category] ? CategoryTranslation[category] : category;
}

export enum TypeSensor {
  NavigationBeacon = 'NavigationBeacon',
  EnvironmentalZoneCameras = 'EnvironmentalZoneCameras',
  SecurityCamera = 'SecurityCamera',
  TrafficFlashlight = 'TrafficFlashlight',
  WeatherStation = 'WeatherStation',
  WindGauge = 'WindGauge',
  WasteContainers = 'WasteContainers',
  FineDustSensor = 'FineDustSensor',
  UVSensor = 'UVSensor',
  LightCell = 'LightCell',
  MotionSensor = 'MotionSensor',
  FireDetector = 'FireDetector',
  WaterLevelMeter = 'WaterLevelMeter',
  MicrophoneOrSoundMeter = 'MicrophoneOrSoundMeter',
  PedometerCounters = 'PedometerCounters',
  RadarDetector = 'RadarDetector',
  GMSSensor = 'GMSSensor',
  DetectionLoop = 'DetectionLoop',
  HeightDetectionDevice = 'HeightDetectionDevice',
}

const SoundSensorTypes = {
  Geophone: 'Geophone',
  Hydrophone: 'Hydrophone',
  Microphone: 'Microphone',
  Pickup: 'Pickup',
  Seismometer: 'Seismometer',
  Soundlevelmeter: 'SoundLevelMeter',
  SoundLocator: 'Sound locator',
};

const ChemicalSensorTypes = {
  Breathalyzer: 'Breathalyzer',
  CarbonDioxideSensor: 'Carbon dioxide sensor',
  CarbonMonoxideDetector: 'Carbon monoxide detector',
  CatalyticBeadSensor: 'Catalytic bead sensor',
  ChemicalFieldEffectTransistor: 'Chemical field-effect transistor',
  Chemiresistor: 'Chemiresistor',
  ElectrochemicalGasSensor: 'Electrochemical gas sensor',
  ElectronicNose: 'Electronic nose',
  ElectrolyteInsulatorSemiconductorSensor: 'Electrolyte–insulator–semiconductor sensor',
  EnergyDispersiveXRaySpectroscopy: 'Energy-dispersive X-ray spectroscopy',
  FluorescentChlorideSensors: 'Fluorescent chloride sensors',
  HolographicSensor: 'Holographic sensor',
  HydrocarbonDewPointAnalyzer: 'Hydrocarbon dew point analyzer',
  HydrogenSensor: 'Hydrogen sensor',
  HydrogenSulfideSensor: 'Hydrogen sulfide sensor',
  InfraredPointSensor: 'Infrared point sensor',
  IonSelectiveElectrode: 'Ion-selective electrode',
  Isfet: 'ISFET',
  NondispersiveInfraredSensor: 'Nondispersive infrared sensor',
  MicrowaveChemistrySensor: 'Microwave chemistry sensor',
  NitrogenOxideSensor: 'Nitrogen oxide sensor',
  Olfactometer: 'Olfactometer',
  Optode: 'Optode',
  OxygenSensor: 'Oxygen sensor',
  OzoneMonitor: 'Ozone monitor',
  Pellistor: 'Pellistor',
  PhGlassElectrode: 'pH glass electrode',
  PotentiometricSensor: 'Potentiometric sensor',
  RedoxElectrode: 'Redox electrode',
  SmokeDetector: 'Smoke detector',
  ZincOxideNanorodSensor: 'Zinc oxide nanorod sensor',
};

const ElectricCurrentSensorTypes = {
  CurrentSensor: 'Current sensor',
  DalyDetector: 'Daly detector',
  Electroscope: 'Electroscope',
  ElectronMultiplier: 'Electron multiplier',
  FaradayCup: 'Faraday cup',
  Galvanometer: 'Galvanometer',
  HallEffectSensor: 'Hall effect sensor',
  HallProbe: 'Hall probe',
  MagneticAnomalyDetector: 'Magnetic anomaly detector',
  Magnetometer: 'Magnetometer',
  Magnetoresistance: 'Magnetoresistance',
  MemsMagneticFieldSensor: 'MEMS magnetic field sensor',
  MetalDetector: 'Metal detector',
  PlanarHallSensor: 'Planar Hall sensor',
  RadioDirectionFinder: 'Radio direction finder',
  TestLight: 'Test light',
  VoltageDetector: 'Voltage detector',
};

const EnvironmentalSensorWeatherStationTypes = {
  Actinometer: 'Actinometer',
  AirPollutionSensor: 'Air pollution sensor',
  BedwettingAlarm: 'Bedwetting alarm',
  Ceilometer: 'Ceilometer',
  DewWarning: 'Dew warning',
  ElectrochemicalGasSensor: 'Electrochemical gas sensor',
  FishCounter: 'Fish counter',
  FrequencyDomainSensor: 'Frequency domain sensor',
  GasDetector: 'Gas detector',
  HookGaugeEvaporimeter: 'Hook gauge evaporimeter',
  Humistor: 'Humistor',
  Hygrometer: 'Hygrometer',
  LeafSensor: 'Leaf sensor',
  Lysimeter: 'Lysimeter',
  Pyranometer: 'Pyranometer',
  Pyrgeometer: 'Pyrgeometer',
  Psychrometer: 'Psychrometer',
  RainGauge: 'Rain gauge',
  RainSensor: 'Rain sensor',
  Seismometer: 'Seismometer',
  Snotel: 'SNOTEL',
  SnowGauge: 'Snow gauge',
  SoilMoistureSensor: 'Soil moisture sensor',
  StreamGauge: 'Stream gauge',
  TideGauge: 'Tide gauge',
  WeatherRadar: 'Weather radar',
};

const FlowSensorTypes = {
  AirFlowMeter: 'Air flow meter',
  Anemometer: 'Anemometer',
  FlowSensor: 'Flow sensor',
  GasMeter: 'Gas meter',
  MassFlowSensor: 'Mass flow sensor',
  WaterMeter: 'Water meter',
};

const PositionDisplacementSensorTypes = {
  Accelerometer: 'Accelerometer',
  Auxanometer: 'Auxanometer',
  CapacitiveDisplacementSensor: 'Capacitive displacement sensor',
  CapacitiveSensing: 'Capacitive sensing',
  Detectionloop: 'DetectionLoop',
  FlexSensor: 'Flex sensor',
  FreeFallSensor: 'Free fall sensor',
  Gravimeter: 'Gravimeter',
  GyroscopicSensor: 'Gyroscopic sensor',
  Heightdetectiondevice: 'HeightDetectionDevice',
  ImpactSensor: 'Impact sensor',
  Inclinometer: 'Inclinometer',
  IncrementalEncoder: 'Incremental encoder',
  IntegratedCircuitPiezoelectricSensor: 'Integrated circuit piezoelectric sensor',
  LaserRangefinder: 'Laser rangefinder',
  LaserSurfaceVelocimeter: 'Laser surface velocimeter',
  Lidar: 'LIDAR',
  LinearEncoder: 'Linear encoder',
  LinearVariableDifferentialTransformerLvdt: 'Linear variable differential transformer (LVDT)',
  LiquidCapacitiveInclinometers: 'Liquid capacitive inclinometers',
  Odometer: 'Odometer',
  PhotoelectricSensor: 'Photoelectric sensor',
  PiezoelectricAccelerometer: 'Piezoelectric accelerometer',
  PositionSensor: 'Position sensor',
  PositionSensitiveDevice: 'Position sensitive device',
  AngularRateSensor: 'Angular rate sensor',
  RotaryEncoder: 'Rotary encoder',
  RotaryVariableDifferentialTransformer: 'Rotary variable differential transformer',
  Selsyn: 'Selsyn',
  ShockDetector: 'Shock detector',
  ShockDataLogger: 'Shock data logger',
  Speeddetectiondevice: 'SpeedDetectionDevice',
  SuddenMotionSensor: 'Sudden Motion Sensor',
  TiltSensor: 'Tilt sensor',
  Tachometer: 'Tachometer',
  UltrasonicThicknessGauge: 'Ultrasonic thickness gauge',
  UltraWidebandRadar: 'Ultra-wideband radar',
  VariableReluctanceSensor: 'Variable reluctance sensor',
  VelocityReceiver: 'Velocity receiver',
};

const OpticalCameraSensorTypes = {
  ChargeCoupledDevice: 'Charge-coupled device',
  CmosSensor: 'CMOS sensor',
  AngleSensitivePixel: 'Angle–sensitive pixel',
  Colorimeter: 'Colorimeter',
  ContactImageSensor: 'Contact image sensor',
  ElectroOpticalSensor: 'Electro-optical sensor',
  FlameDetector: 'Flame detector',
  InfraRedSensor: 'Infra-red sensor',
  KineticInductanceDetector: 'Kinetic inductance detector',
  LedAsLightSensor: 'LED as light sensor',
  LightAddressablePotentiometricSensor: 'Light-addressable potentiometric sensor',
  NicholsRadiometer: 'Nichols radiometer',
  FiberOpticSensors: 'Fiber optic sensors',
  OpticalPositionSensor: 'Optical position sensor',
  ThermopileLaserSensors: 'Thermopile laser sensors',
  Photodetector: 'Photodetector',
  Photodiode: 'Photodiode',
  Photomultiplier: 'Photomultiplier',
  PhotomultiplierTube: 'Photomultiplier tube',
  Phototransistor: 'Phototransistor',
  PhotoelectricSensor: 'Photoelectric sensor',
  PhotoionizationDetector: 'Photoionization detector',
  Photoresistor: 'Photoresistor',
  Photoswitch: 'Photoswitch',
  Phototube: 'Phototube',
  Scintillometer: 'Scintillometer',
  ShackHartmannWavefrontSensor: 'Shack–Hartmann wavefront sensor',
  SinglePhotonAvalancheDiode: 'Single-photon avalanche diode',
  SuperconductingNanowireSinglePhotonDetector: 'Superconducting nanowire single-photon detector',
  TransitionEdgeSensor: 'Transition-edge sensor',
  Uvsensor: 'UVSensor',
  VisibleLightPhotonCounter: 'Visible Light Photon Counter',
  WavefrontSensor: 'Wavefront sensor',
};

const PressureSensorTypes = {
  Barograph: 'Barograph',
  Barometer: 'Barometer',
  BoostGauge: 'Boost gauge',
  BourdonGauge: 'Bourdon gauge',
  HotFilamentIonizationGauge: 'Hot filament ionization gauge',
  IonizationGauge: 'Ionization gauge',
  McleodGauge: 'McLeod gauge',
  OscillatingUTube: 'Oscillating U-tube',
  PermanentDownholeGauge: 'Permanent downhole gauge',
  Piezometer: 'Piezometer',
  PiraniGauge: 'Pirani gauge',
  PressureSensor: 'Pressure sensor',
  PressureGauge: 'Pressure gauge',
  TactileSensor: 'Tactile sensor',
  TimePressureGauge: 'Time pressure gauge',
};

const DensitySensorTypes = {
  Bhangmeter: 'Bhangmeter',
  Hydrometer: 'Hydrometer',
  ForceGaugeAndForceSensor: 'Force gauge and Force Sensor',
  LevelSensor: 'Level sensor',
  LoadCell: 'Load cell',
  MagneticLevelGauge: 'Magnetic level gauge',
  NuclearDensityGauge: 'Nuclear density gauge',
  PiezocapacitivePressureSensor: 'Piezocapacitive pressure sensor',
  PiezoelectricSensor: 'Piezoelectric sensor',
  StrainGauge: 'Strain gauge',
  TorqueSensor: 'Torque sensor',
  Viscometer: 'Viscometer',
};

const TemperatureSensorTypes = {
  Bolometer: 'Bolometer',
  BimetallicStrip: 'Bimetallic strip',
  Calorimeter: 'Calorimeter',
  ExhaustGasTemperatureGauge: 'Exhaust gas temperature gauge',
  FlameDetection: 'Flame detection',
  GardonGauge: 'Gardon gauge',
  GolayCell: 'Golay cell',
  HeatFluxSensor: 'Heat flux sensor',
  InfraredThermometer: 'Infrared thermometer',
  Microbolometer: 'Microbolometer',
  MicrowaveRadiometer: 'Microwave radiometer',
  NetRadiometer: 'Net radiometer',
  QuartzThermometer: 'Quartz thermometer',
  ResistanceThermometer: 'Resistance thermometer',
  SiliconBandgapTemperatureSensor: 'Silicon bandgap temperature sensor',
  SpecialSensorMicrowaveImager: 'Special sensor microwave/imager',
  TemperatureGauge: 'Temperature gauge',
  Thermistor: 'Thermistor',
  Thermocouple: 'Thermocouple',
  Thermometer: 'Thermometer',
  Pyrometer: 'Pyrometer',
};

const ProximitySensorTypes = {
  AlarmSensor: 'Alarm sensor',
  DopplerRadar: 'Doppler radar',
  MotionDetector: 'Motion detector',
  OccupancySensor: 'Occupancy sensor',
  ProximitySensor: 'Proximity sensor',
  PassiveInfraredSensor: 'Passive infrared sensor',
  ReedSwitch: 'Reed switch',
  StudFinder: 'Stud finder',
  TriangulationSensor: 'Triangulation sensor',
  TouchSwitch: 'Touch switch',
  ActivePixelSensor: 'Active pixel sensor',
  BackIlluminatedSensor: 'Back-illuminated sensor',
  Biofet: 'BioFET',
  Biochip: 'Biochip',
  Biosensor: 'Biosensor',
  CapacitanceProbe: 'Capacitance probe',
  CapacitanceSensor: 'Capacitance sensor',
  CatadioptricSensor: 'Catadioptric sensor',
  CarbonPasteElectrode: 'Carbon paste electrode',
  DigitalSensors: 'Digital sensors',
  DisplacementReceiver: 'Displacement receiver',
  ElectromechanicalFilm: 'Electromechanical film',
  ElectroOpticalSensor: 'Electro-optical sensor',
  ElectrochemicalFatigueCrackSensor: 'Electrochemical fatigue crack sensor',
  FabryPerotInterferometer: 'Fabry–Pérot interferometer',
  FisheriesAcoustics: 'Fisheries acoustics',
  ImageSensor: 'Image sensor',
  ImageSensorFormat: 'Image sensor format',
  InductiveSensor: 'Inductive sensor',
  IntelligentSensor: 'Intelligent sensor',
  LabOnAChip: 'Lab-on-a-chip',
  LeafSensor: 'Leaf sensor',
  MachineVision: 'Machine vision',
  MicroelectromechanicalSystems: 'Microelectromechanical systems',
  Mosfet: 'MOSFET',
  Photoelasticity: 'Photoelasticity',
  QuantumSensor: 'Quantum sensor',
  Radar: 'Radar',
  GroundPenetratingRadar: 'Ground-penetrating radar',
  SyntheticApertureRadar: 'Synthetic aperture radar',
  RadarTracker: 'Radar tracker',
  StretchSensor: 'Stretch sensor',
  SensorArray: 'Sensor array',
  SensorFusion: 'Sensor fusion',
  SensorGrid: 'Sensor grid',
  SensorNode: 'Sensor node',
  SoftSensor: 'Soft sensor',
  Sonar: 'Sonar',
  StaringArray: 'Staring array',
  Transducer: 'Transducer',
  UltrasonicSensor: 'Ultrasonic sensor',
  VideoSensor: 'Video sensor',
  VisualSensorNetwork: 'Visual sensor network',
  WheatstoneBridge: 'Wheatstone bridge',
  WirelessSensorNetwork: 'Wireless sensor network',
};

const OtherTypes = {
  Actigraphy: 'Actigraphy',
  AirPollutionSensor: 'Air pollution sensor',
  AnalogImageProcessing: 'Analog image processing',
  AtomicForceMicroscopy: 'Atomic force microscopy',
  AtomicGravitationalWaveInterferometricSensor: 'Atomic Gravitational Wave Interferometric Sensor',
  AttitudeControlSpacecraftHorizonSensorEarthSensorSunSensor: 'Attitude control (spacecraft): Horizon sensor, Earth sensor, Sun sensor',
  CatadioptricSensor: 'Catadioptric sensor',
  Chemoreceptor: 'Chemoreceptor',
  CompressiveSensing: 'Compressive sensing',
  CryogenicParticleDetectors: 'Cryogenic particle detectors',
  DewWarning: 'Dew warning',
  DiffusionTensorImaging: 'Diffusion tensor imaging',
  DigitalHolography: 'Digital holography',
  ElectronicTongue: 'Electronic tongue',
  FineGuidanceSensor: 'Fine Guidance Sensor',
  Finedustsensor: 'FineDustSensor',
  FlatPanelDetector: 'Flat panel detector',
  FunctionalMagneticResonanceImaging: 'Functional magnetic resonance imaging',
  GlassBreakDetector: 'Glass break detector',
  HeartbeatSensor: 'Heartbeat sensor',
  HyperspectralSensors: 'Hyperspectral sensors',
  IrisBiosensorInterferometricReflectanceImagingSensor: 'IRIS (Biosensor), Interferometric Reflectance Imaging Sensor',
  LaserBeamProfiler: 'Laser beam profiler',
  LittoralAirborneSensorHyperspectral: 'Littoral Airborne Sensor/Hyperspectral',
  Lorros: 'LORROS',
  MillimeterWaveScanner: 'Millimeter wave scanner',
  MagneticResonanceImaging: 'Magnetic resonance imaging',
  MoireDeflectometry: 'Moire deflectometry',
  MolecularSensor: 'Molecular sensor',
  Nanosensor: 'Nanosensor',
  NanoTetherballSensor: 'Nano-tetherball Sensor',
  OmnidirectionalCamera: 'Omnidirectional camera',
  OrganolepticSensors: 'Organoleptic sensors',
  OpticalCoherenceTomography: 'Optical coherence tomography',
  PhaseUnwrappingTechniques: 'Phase unwrapping techniques',
  PolygraphTruthDetection: 'Polygraph Truth Detection',
  PositronEmissionTomography: 'Positron emission tomography',
  PushBroomScanner: 'Push broom scanner',
  QuantizationSignalProcessing: 'Quantization (signal processing)',
  RangeImaging: 'Range imaging',
  ScanningSquidMicroscope: 'Scanning SQUID microscope',
  SinglePhotonEmissionComputedTomographySpect: 'Single-Photon Emission Computed Tomography (SPECT)',
  Smartdust: 'Smartdust',
  SquidSuperconductingQuantumInterferenceDevice: 'SQUID, Superconducting quantum interference device',
  SsiesSpecialSensorsIonsElectronsAndScintillationThermalPlasmaAnalysisPackage: 'SSIES, Special Sensors-Ions, Electrons, and Scintillation thermal plasma analysis package',
  SsmisSpecialSensorMicrowaveImagerSounder: 'SSMIS, Special Sensor Microwave Imager / Sounder',
  StructuredLight3dScanner: 'Structured-light 3D scanner',
  SunSensorAttitudeControlSpacecraft: 'Sun sensor, Attitude control (spacecraft)',
  SuperconductingNanowireSinglePhotonDetector: 'Superconducting nanowire single-photon detector',
  ThinFilmThicknessMonitor: 'Thin-film thickness monitor',
  TimeOfFlightCamera: 'Time-of-flight camera',
  TridarTriangulationAndLidarAutomatedRendezvousAndDocking: 'TriDAR, Triangulation and LIDAR Automated Rendezvous and Docking',
  UnattendedGroundSensors: 'Unattended Ground Sensors',
};

export const SensorTypes = {
  SoundSensor: SoundSensorTypes,
  ChemicalSensor: ChemicalSensorTypes,
  ElectricCurrentSensor: ElectricCurrentSensorTypes,
  EnvironmentalSensorWeatherStation: EnvironmentalSensorWeatherStationTypes,
  FlowSensor: FlowSensorTypes,
  PositionDisplacementSensor: PositionDisplacementSensorTypes,
  OpticalCameraSensor: OpticalCameraSensorTypes,
  PressureSensor: PressureSensorTypes,
  DensitySensor: DensitySensorTypes,
  TemperatureSensor: TemperatureSensorTypes,
  ProximitySensor: ProximitySensorTypes,
  Other: OtherTypes,
};
